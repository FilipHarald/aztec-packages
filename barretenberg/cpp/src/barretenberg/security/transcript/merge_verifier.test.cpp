#include "barretenberg/ultra_honk/merge_verifier.hpp"
#include "barretenberg/circuit_checker/circuit_checker.hpp"
#include "barretenberg/common/test.hpp"
#include "barretenberg/goblin/mock_circuits.hpp"
#include "barretenberg/stdlib/honk_recursion/verifier/merge_recursive_verifier.hpp"
#include "barretenberg/stdlib/primitives/curves/bn254.hpp"
#include "barretenberg/ultra_honk/merge_prover.hpp"
#include "barretenberg/ultra_honk/ultra_prover.hpp"
#include "barretenberg/ultra_honk/ultra_verifier.hpp"

namespace bb::stdlib::recursion::goblin {

/**
 * @brief Test suite for recursive verification of Goblin Merge proofs
 * @details The recursive verification circuit is arithmetized using Goblin-style Ultra arithmetization
 * (MegaCircuitBuilder).
 *
 * @tparam Builder
 */
template <class RecursiveBuilder> class TranscriptSecurityMergeVerifierTest : public testing::Test {

    // Define types relevant for inner circuit
    using InnerFlavor = MegaFlavor;
    using InnerProverInstance = ProverInstance_<InnerFlavor>;
    using InnerBuilder = typename InnerFlavor::CircuitBuilder;

    // Define additional types for testing purposes
    using Commitment = InnerFlavor::Commitment;
    using FF = InnerFlavor::FF;
    using VerifierCommitmentKey = bb::VerifierCommitmentKey<curve::BN254>;
    using MergeProver = MergeProver_<InnerFlavor>;
    using MergeVerifier = MergeVerifier_<InnerFlavor>;

  public:
    static void SetUpTestSuite() { bb::srs::init_crs_factory("../srs_db/ignition"); }

    /**
     * @brief Test recursive merge verification for the ops generated by a sample circuit
     * @details We construct and verify an Ultra Honk proof of the recursive merge verifier circuit to check its
     * correctness rather than calling check_circuit since this functionality is incomplete for the Goblin
     * arithmetization
     */
    static void test_merge_verification()
    {
        auto op_queue = std::make_shared<ECCOpQueue>();
        // TODO(https://github.com/AztecProtocol/barretenberg/issues/800) Testing cleanup
        GoblinMockCircuits::perform_op_queue_interactions_for_mock_first_circuit(op_queue);

        InnerBuilder sample_circuit{ op_queue };
        GoblinMockCircuits::construct_simple_circuit(sample_circuit);

        // Generate a proof over the inner circuit
        MergeProver merge_prover{ op_queue };
        auto merge_proof = merge_prover.construct_proof();

        size_t maximum_index = 0;
        MergeVerifier verifier;
        EXPECT_NO_THROW(
            verifier.verify_proof(merge_proof, &maximum_index, /*enable_sanitizer=*/true, /*separation_index=*/0));
        for (size_t i = 1; i < maximum_index; i++) {
            MergeVerifier verifier;
            EXPECT_NO_THROW(
                verifier.verify_proof(merge_proof, nullptr, /*enable_sanitizer=*/true, /*separation_index=*/1));
        }
        // Check the recursive merge verifier circuit
    }
};

// Run the recursive verifier tests with Ultra and Mega builders
// TODO(https://github.com/AztecProtocol/barretenberg/issues/1024): Ultra fails, possibly due to repeated points in
// batch mul?
using Builders = testing::Types<UltraCircuitBuilder>;

TYPED_TEST_SUITE(TranscriptSecurityMergeVerifierTest, Builders);

TYPED_TEST(TranscriptSecurityMergeVerifierTest, SingleVerification)
{
    TestFixture::test_merge_verification();
};

} // namespace bb::stdlib::recursion::goblin